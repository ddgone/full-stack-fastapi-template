// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message',
            description: '操作消息'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token',
            description: '密码重置令牌'
        },
        new_password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'New Password',
            description: '新密码'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const ProjectCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title',
            description: '项目标题'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '项目描述'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'ProjectCreate'
} as const;

export const ProjectPublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title',
            description: '项目标题'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '项目描述'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: '项目ID'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id',
            description: '所有者ID'
        }
    },
    type: 'object',
    required: ['title', 'id', 'owner_id'],
    title: 'ProjectPublic'
} as const;

export const ProjectUpdateSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title',
            description: '更新标题'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '项目描述'
        }
    },
    type: 'object',
    title: 'ProjectUpdate'
} as const;

export const ProjectsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ProjectPublic'
            },
            type: 'array',
            title: 'Data',
            description: '项目列表'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: '项目总数'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'ProjectsPublic'
} as const;

export const TaskCreateSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title',
            description: '任务标题'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '任务描述'
        },
        status: {
            '$ref': '#/components/schemas/TaskStatus',
            description: '任务状态，默认为待处理',
            default: 'pending'
        },
        priority: {
            '$ref': '#/components/schemas/TaskPriority',
            description: '任务优先级，默认为中',
            default: 'medium'
        },
        due_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Due Date',
            description: '截止日期'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'TaskCreate'
} as const;

export const TaskPrioritySchema = {
    type: 'string',
    enum: ['low', 'medium', 'high'],
    title: 'TaskPriority',
    description: '任务优先级枚举'
} as const;

export const TaskPublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title',
            description: '任务标题'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: '任务描述'
        },
        status: {
            '$ref': '#/components/schemas/TaskStatus',
            description: '任务状态，默认为待处理',
            default: 'pending'
        },
        priority: {
            '$ref': '#/components/schemas/TaskPriority',
            description: '任务优先级，默认为中',
            default: 'medium'
        },
        due_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Due Date',
            description: '截止日期'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: '任务ID'
        },
        project_id: {
            type: 'string',
            format: 'uuid',
            title: 'Project Id',
            description: '所属项目ID'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id',
            description: '所有者ID'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: '创建时间'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At',
            description: '更新时间'
        },
        collaborators: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Collaborators',
            description: '协作者列表',
            default: []
        }
    },
    type: 'object',
    required: ['title', 'id', 'project_id', 'owner_id', 'created_at', 'updated_at'],
    title: 'TaskPublic'
} as const;

export const TaskStatusSchema = {
    type: 'string',
    enum: ['pending', 'in_progress', 'completed'],
    title: 'TaskStatus',
    description: '任务状态枚举'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token',
            description: 'JWT访问令牌'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            description: '令牌类型',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Current Password',
            description: '当前密码'
        },
        new_password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'New Password',
            description: '新密码'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            description: '用户邮箱'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: '账户激活状态',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            description: '管理员权限',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name',
            description: '用户全名'
        },
        password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Password',
            description: '用户密码'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            description: '用户邮箱'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: '账户激活状态',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            description: '管理员权限',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name',
            description: '用户全名'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id',
            description: '用户ID'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email',
            description: '注册邮箱'
        },
        password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Password',
            description: '注册密码'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name',
            description: '用户全名'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email',
            description: '更新邮箱'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: '账户激活状态',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            description: '管理员权限',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name',
            description: '用户全名'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 128,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password',
            description: '更新密码'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name',
            description: '更新全名'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email',
            description: '更新邮箱'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data',
            description: '用户列表'
        },
        count: {
            type: 'integer',
            title: 'Count',
            description: '用户总数'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;